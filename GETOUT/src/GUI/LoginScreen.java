//2020 Jan 21 Fred Chen, Ashwin Boni Bangari, Sam Rogers
/*
 *Login Screen of the program.
 */
package GUI;

import Backend.Email;
import Backend.User;

import getout.GETOUT;

import java.io.IOException;

import java.security.GeneralSecurityException;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.Callable;

/**
 *
 * @author Fred Chen, Sam Rodgers
 */
public class LoginScreen extends javax.swing.JFrame {

    public static User currentUser;//These instances are used throughout the program
    public static Email email;//     and represent the current user.

    public LoginScreen() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        browserLoadQuestion = new javax.swing.JButton();
        verifiedAppQuestion = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        Login = new javax.swing.JButton();
        username = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(450, 600));
        setPreferredSize(new java.awt.Dimension(450, 570));
        setResizable(false);
        setSize(new java.awt.Dimension(450, 570));
        getContentPane().setLayout(null);

        browserLoadQuestion.setForeground(new java.awt.Color(255, 255, 255));
        browserLoadQuestion.setText("Browser won't load?");
        browserLoadQuestion.setBorder(null);
        browserLoadQuestion.setBorderPainted(false);
        browserLoadQuestion.setContentAreaFilled(false);
        browserLoadQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browserLoadQuestionActionPerformed(evt);
            }
        });
        getContentPane().add(browserLoadQuestion);
        browserLoadQuestion.setBounds(48, 548, 130, 15);

        verifiedAppQuestion.setBorder(null);
        verifiedAppQuestion.setBorderPainted(false);
        verifiedAppQuestion.setContentAreaFilled(false);
        verifiedAppQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifiedAppQuestionActionPerformed(evt);
            }
        });
        getContentPane().add(verifiedAppQuestion);
        verifiedAppQuestion.setBounds(50, 520, 170, 30);

        exitButton.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        exitButton.setForeground(new java.awt.Color(255, 255, 255));
        exitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/SubmitButton.png"))); // NOI18N
        exitButton.setText("Exit");
        exitButton.setToolTipText("");
        exitButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        getContentPane().add(exitButton);
        exitButton.setBounds(371, 520, 60, 30);

        Login.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/LoginButtonUnpressed.png"))); // NOI18N
        Login.setToolTipText("");
        Login.setAlignmentY(0.0F);
        Login.setBorder(null);
        Login.setBorderPainted(false);
        Login.setContentAreaFilled(false);
        Login.setFocusPainted(false);
        Login.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/LoginButtonPressed.png"))); // NOI18N
        Login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginActionPerformed(evt);
            }
        });
        getContentPane().add(Login);
        Login.setBounds(98, 431, 250, 70);

        username.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        username.setForeground(new java.awt.Color(255, 255, 255));
        username.setBorder(null);
        username.setOpaque(false);
        username.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        getContentPane().add(username);
        username.setBounds(60, 265, 330, 30);

        password.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        password.setForeground(new java.awt.Color(255, 255, 255));
        password.setAlignmentX(0.0F);
        password.setAlignmentY(0.0F);
        password.setBorder(null);
        password.setOpaque(false);
        getContentPane().add(password);
        password.setBounds(60, 370, 330, 30);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Login.jpg"))); // NOI18N
        jLabel3.setAlignmentY(0.0F);
        getContentPane().add(jLabel3);
        jLabel3.setBounds(0, 0, 450, 570);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed


    private void LoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginActionPerformed

        //Looks for the user in the database; null if no match
        currentUser = GETOUT.users.stream()
                .filter(user -> username.getText().equals(user.getEmail()))
                .findAny()
                .orElse(null);

        if (currentUser == null) {
            java.awt.EventQueue.invokeLater(() -> {
                new ErrorPanel("Not a valid user!").setVisible(true);
            });
        } else {
            //If the passwords match as well, then a 60 second timer starts 
            //to allow the user to log into gmail. 

            if (password.getText().equals(currentUser.getPassword())) {

                Timer timer = new Timer("Timer");
                Thread loginThread = new Thread() {//Multi-threaded to allow for timer to work
                    @Override
                    public void run() {
                        try {
                            setVisible(false);
                            email = new Email(currentUser.getEmail());//Attempts to log into gmail
                            timer.cancel();//If login is successful, then the code will run to the next line
                            //and the timer will stop
                            dispose();

                            java.awt.EventQueue.invokeLater(() -> {
                                new MenuScreen().setVisible(true);//Proceed to program
                            });

                        } catch (GeneralSecurityException | IOException ex) {
                            Logger.getLogger(LoginScreen.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                };

                //If the timer runs out, the connection with Google servers will stop and 
                //the user will be prompted to try again
                TimerTask task = new TimerTask() {
                    @Override
                    public void run() {
                        setVisible(true);
                        new ErrorPanel("Session timed out, please try again.").setVisible(true);
                        loginThread.stop();

                    }
                };

                loginThread.start();
                timer.schedule(task, 60000);//60 seconds               

            } else {
                new ErrorPanel("Incorrect Password!").setVisible(true);
            }
        }
    }//GEN-LAST:event_LoginActionPerformed

    
    //Below are two info panels that respond to the questions on the login screen
    private void verifiedAppQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifiedAppQuestionActionPerformed
        new ErrorPanel("Our program uses Gmail Api. In order to get our app verified, "
                + "we would have to pay money. "
                + "To get around this, click 'Advanced', and then 'Proceed to QuickStart'.", true).setVisible(true);
    }//GEN-LAST:event_verifiedAppQuestionActionPerformed

    private void browserLoadQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browserLoadQuestionActionPerformed
        new ErrorPanel("Gmail's api only works on Chrome. "
                + "Copy the link from your browser and paste it on a Chrome Browser.", true).setVisible(true);
    }//GEN-LAST:event_browserLoadQuestionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Login;
    private javax.swing.JButton browserLoadQuestion;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField username;
    private javax.swing.JButton verifiedAppQuestion;
    // End of variables declaration//GEN-END:variables
}
